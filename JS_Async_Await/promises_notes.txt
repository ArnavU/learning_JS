In JavaScript, promises are a mechanism for handling asynchronous operations. They provide a cleaner and more flexible way to work with asynchronous code compared to traditional callback patterns. Promises represent a value that might be available now, or in the future, or never.

A promise is in one of three states:

1. **Pending:** The initial state; the promise is neither fulfilled nor rejected.
2. **Fulfilled:** The operation completed successfully, and the promise has a resulting value.
3. **Rejected:** The operation failed, and the promise has a reason for the failure.

Here's the basic syntax for creating a promise:

```javascript
const myPromise = new Promise((resolve, reject) => {
  // Asynchronous operation or any code that may lead to success or failure
  const operationSuccessful = true;

  if (operationSuccessful) {
    // If successful, call resolve with the result
    resolve("Operation completed successfully");
  } else {
    // If failed, call reject with an error or reason
    reject("Operation failed");
  }
});
```

You can then handle the result using the `.then()` method for a fulfilled promise or the `.catch()` method for a rejected promise:

```javascript
myPromise
  .then(result => {
    console.log(result); // Output: Operation completed successfully
  })
  .catch(error => {
    console.error(error); // Output: Operation failed
  });
```

Promises are especially useful for managing complex asynchronous code, such as making HTTP requests, reading files, or performing other I/O operations. They help avoid the callback hell (nested callbacks) and make the code more readable and maintainable.

Here's an example of using a promise with a simulated asynchronous operation:

```javascript
function delay(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}

delay(2000)
  .then(() => console.log("After 2 seconds"))
  .catch(error => console.error("Error:", error));
```

In this example, the `delay` function returns a promise that resolves after a specified number of milliseconds. The `.then()` method is used to execute code after the promise is fulfilled, and the `.catch()` method is used to handle errors if the promise is rejected.